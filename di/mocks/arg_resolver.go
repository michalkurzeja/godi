// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	di "github.com/michalkurzeja/godi/v2/di"
	mock "github.com/stretchr/testify/mock"
)

// ArgResolver is an autogenerated mock type for the ArgResolver type
type ArgResolver struct {
	mock.Mock
}

type ArgResolver_Expecter struct {
	mock *mock.Mock
}

func (_m *ArgResolver) EXPECT() *ArgResolver_Expecter {
	return &ArgResolver_Expecter{mock: &_m.Mock}
}

// Resolve provides a mock function with given fields: arg
func (_m *ArgResolver) Resolve(arg di.Arg) (interface{}, error) {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for Resolve")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(di.Arg) (interface{}, error)); ok {
		return rf(arg)
	}
	if rf, ok := ret.Get(0).(func(di.Arg) interface{}); ok {
		r0 = rf(arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(di.Arg) error); ok {
		r1 = rf(arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArgResolver_Resolve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resolve'
type ArgResolver_Resolve_Call struct {
	*mock.Call
}

// Resolve is a helper method to define mock.On call
//   - arg di.Arg
func (_e *ArgResolver_Expecter) Resolve(arg interface{}) *ArgResolver_Resolve_Call {
	return &ArgResolver_Resolve_Call{Call: _e.mock.On("Resolve", arg)}
}

func (_c *ArgResolver_Resolve_Call) Run(run func(arg di.Arg)) *ArgResolver_Resolve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Arg))
	})
	return _c
}

func (_c *ArgResolver_Resolve_Call) Return(_a0 interface{}, _a1 error) *ArgResolver_Resolve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArgResolver_Resolve_Call) RunAndReturn(run func(di.Arg) (interface{}, error)) *ArgResolver_Resolve_Call {
	_c.Call.Return(run)
	return _c
}

// ResolveIDs provides a mock function with given fields: arg
func (_m *ArgResolver) ResolveIDs(arg di.Arg) []di.ID {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for ResolveIDs")
	}

	var r0 []di.ID
	if rf, ok := ret.Get(0).(func(di.Arg) []di.ID); ok {
		r0 = rf(arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]di.ID)
		}
	}

	return r0
}

// ArgResolver_ResolveIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResolveIDs'
type ArgResolver_ResolveIDs_Call struct {
	*mock.Call
}

// ResolveIDs is a helper method to define mock.On call
//   - arg di.Arg
func (_e *ArgResolver_Expecter) ResolveIDs(arg interface{}) *ArgResolver_ResolveIDs_Call {
	return &ArgResolver_ResolveIDs_Call{Call: _e.mock.On("ResolveIDs", arg)}
}

func (_c *ArgResolver_ResolveIDs_Call) Run(run func(arg di.Arg)) *ArgResolver_ResolveIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Arg))
	})
	return _c
}

func (_c *ArgResolver_ResolveIDs_Call) Return(_a0 []di.ID) *ArgResolver_ResolveIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArgResolver_ResolveIDs_Call) RunAndReturn(run func(di.Arg) []di.ID) *ArgResolver_ResolveIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: arg
func (_m *ArgResolver) Validate(arg di.Arg) error {
	ret := _m.Called(arg)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(di.Arg) error); ok {
		r0 = rf(arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ArgResolver_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ArgResolver_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - arg di.Arg
func (_e *ArgResolver_Expecter) Validate(arg interface{}) *ArgResolver_Validate_Call {
	return &ArgResolver_Validate_Call{Call: _e.mock.On("Validate", arg)}
}

func (_c *ArgResolver_Validate_Call) Run(run func(arg di.Arg)) *ArgResolver_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(di.Arg))
	})
	return _c
}

func (_c *ArgResolver_Validate_Call) Return(_a0 error) *ArgResolver_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ArgResolver_Validate_Call) RunAndReturn(run func(di.Arg) error) *ArgResolver_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// NewArgResolver creates a new instance of ArgResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArgResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArgResolver {
	mock := &ArgResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
